{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf190
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 Menlo-Bold;
\f3\fnil\fcharset0 LucidaGrande;}
{\colortbl;\red255\green255\blue255;\red63\green105\blue30;\red170\green13\blue145;\red63\green110\blue116;
\red46\green13\blue110;\red28\green0\blue207;\red92\green38\blue153;\red196\green26\blue22;\red100\green56\blue32;
\red0\green116\blue0;\red38\green71\blue75;}
\margl1440\margr1440\vieww9260\viewh16300\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural

\f0\b\fs24 \cf0 05122014\
\
AUDIO LIST\

\b0 \
change the NSDictionary to NSMutable Dictionary\
\
- need to overwrite dictionary properties\
- now change to NSObject\
- building an object with a few pieces of a dictionary\
\
ALA Track: NSObject\
ALATrack.h\
\pard\tx481\pardeftab481\pardirnatural

\f1\fs20 \cf2 \CocoaLigature0 - (id)objectForKey:(id)aKey;\
- (void)setObjectForKey: (id)anObject forKey:(id <NSCopying>)aKey;\
- (void)removeObjectsForKey: (id)aKey;\
\
these were commented  out of the h file\
\
\
\cf0 \
+ (id)newTrack\
\{\
	return [[ALATrack alloc] init]\
\}\
\
this is a class method that does its own allocating and initing.\
\
+ (\cf3 id\cf0 )newTrack\
\{\
    \cf3 return\cf0  [[\cf4 ALATrack\cf0  \cf5 alloc\cf0 ]\cf5 init\cf0 ];\
\}\
\
- (\cf3 id\cf0 )init\
\{\
    \cf3 self\cf0  = [\cf3 super\cf0  init];\
    \cf3 if\cf0 (\cf3 self\cf0 )\
    \{\
        dict = [\cf6 @\{\}\cf0  mutableCopy];\
    \}\
    \cf3 return\cf0  \cf3 self\cf0 ;\
\}\
\
- (\cf3 id\cf0 )objectForKey: (\cf3 id\cf0 )aKey\
\{\
    \cf3 return\cf0  dict[aKey];\
\}\
\
- (\cf3 void\cf0 )setObjectForKey: (\cf3 id\cf0 )anObject forKey:(\cf3 id\cf0  <NSCopying>)aKey\
\{\
    dict[aKey] = anObject;\
\}\
\
- (\cf3 void\cf0 )removeObjectsForKey: (\cf3 id\cf0 )aKey\
\{\
    [dict removeObjectForKey:aKey];\
\}\
\
\
\

\f2\b ALASOUNDCLOUDREQUEST\
\
.h \

\f1\b0 add \
+ (void)updateData\
\
define this is in the .m\
this is a request that wants to get info from the sound\
\
  \cf7 NSURL\cf0  * requestURL = [\cf7 NSURL\cf0  \cf5 URLWithString\cf0 :[\cf7 NSString\cf0  \cf5 stringWithFormat\cf0 :\cf8 @"%@/users/%@/playlists.json?%@"\cf0 , \cf9 SC_API\cf0 ,\cf9 USER_NAME\cf0 , \cf9 CLIENT_ID\cf0 ]];\
    \
    \cf7 NSURLRequest\cf0  * request = [\cf7 NSURLRequest\cf0  \cf5 requestWithURL\cf0 :requestURL];\
    \
    \cf7 NSOperationQueue\cf0  * queue  = [[\cf7 NSOperationQueue\cf0  \cf5 alloc\cf0 ] \cf5 init\cf0 ];\
    \
    [\cf7 NSURLConnection\cf0  \cf5 sendAsynchronousRequest\cf0 :request \cf5 queue\cf0 :queue \cf5 completionHandler\cf0 :^(\cf7 NSURLResponse\cf0  *response, \cf7 NSData\cf0  *data, \cf7 NSError\cf0  *connectionError) \{\
        \
        \cf7 NSArray\cf0  * scInfo = [\cf7 NSJSONSerialization\cf0  \cf5 JSONObjectWithData\cf0 :data \cf5 options\cf0 :\cf6 0\cf0  \cf5 error\cf0 :\cf3 nil\cf0 ];\
\
\
then run a for loop to get dictionary items\
\
[import ALATrack.h into the ALAData.h, then import this into ALASoundCloudRequest.m so we can get all the info from the ALATrack without importing twice]\
\
\cf3 for\cf0  (\cf7 NSDictionary\cf0  * playlist \cf3 in\cf0  scInfo)\
    \{\
        \cf10 //create a new playlist and set things like playlst title\cf0 \
        \
        \cf3 for\cf0 (\cf7 NSDictionary\cf0   * trackInfo \cf3 in\cf0  playlist[\cf8 @"tracks"\cf0  ])\
        \{\
            \cf4 ALATrack\cf0  * track = [\cf4 ALATrack\cf0  newTrack];\
\
//track[@\'93title\'94] = trackInfo[@\'93title\'94];\
cannot use this unlesss its a NSMutable Dictionary\
\
            \
            [track \cf11 setObjectForKey\cf0 :trackInfo[\cf8 @"title"\cf0 ] \cf11 forKey\cf0 :\cf8 @"title"\cf0 ];\
            \
        \}\
\
changed ALATrack back to an NSMutableDictionary to allow literals to work.\
\
\
\cf3 for\cf0  (\cf7 NSDictionary\cf0  * playlist \cf3 in\cf0  scInfo)\
    \{\
        \cf10 //create a new playlist and set things like playlst title\cf0 \
        \
        \cf3 for\cf0 (\cf7 NSDictionary\cf0   * trackInfo \cf3 in\cf0  playlist[\cf8 @"tracks"\cf0  ])\
        \{\
            \cf3 if\cf0 (!trackInfo[\cf8 @"streamable"\cf0 ]) \cf3 continue\cf0 ;\
            \
            \cf4 ALATrack\cf0  * track = [\cf4 ALATrack\cf0  \cf11 newTrack\cf0 ];\
            \
            track[\cf8 @"title"\cf0 ] = trackInfo[\cf8 @"title"\cf0 ];\
            track[\cf8 @"url"\cf0 ] = trackInfo[\cf8 @"stream_url"\cf0 ];\
            \
            [[\cf4 ALAData\cf0  \cf11 mainData\cf0 ] \cf11 addNewTrack\cf0 :track];\
            \
      \}\
            \
    \}\
        \
        \cf5 NSLog\cf0 (\cf8 @"%@"\cf0 , [[\cf4 ALAData\cf0  \cf11 mainData\cf0 ]\cf11 allTracks\cf0 ]);\
\
        \
    \}];\
\
updated \

\f2\b ALADATA (singleton)\
\

\f1\b0 added two new methods to update items for tracks\
\
- (\cf7 NSArray\cf0  *)allTracks;\
- (\cf3 void\cf0 )addNewTrack:(\cf4 ALATrack\cf0  *)track;\
\
will do the same for artists and albums\
\
\

\f2\b ALAiPadTableViewController\

\f1\b0 .m\
\
this is to update iPadTVC\
\
\
called the singletons\

\f2\b [\cf4 ALAData\cf0  \cf11 mainData\cf0 ] \cf11 allTracks\cf0 ]\
\
\
THIS IS FOR TESTING!!!!\
\
 \cf7 NSNotificationCenter\cf0  * nCenter = [\cf7 NSNotificationCenter\cf0  \cf5 defaultCenter\cf0 ];\
\

\itap1\trowd \taflags0 \trgaph108\trleft-108 \trbrdrt\brdrnil \trbrdrl\brdrnil \trbrdrt\brdrnil \trbrdrr\brdrnil 
\clvertalt \clshdrawnil \clwWidth7360\clftsWidth3 \clmart10 \clmarl10 \clmarb10 \clmarr10 \clbrdrt\brdrnil \clbrdrl\brdrnil \clbrdrb\brdrnil \clbrdrr\brdrnil \clpadl0 \clpadb200 \clpadr0 \gaph\cellx8640
\pard\intbl\itap1\pardeftab720

\f3\fs22 \cf0 \CocoaLigature1 An NSNotificationCenter object (or simply, notification center) provides a mechanism for broadcasting information within a program. An NSNotificationCenter object is essentially a notification dispatch table.\
\
\pard\intbl\itap1\tx481\pardeftab481\pardirnatural

\f2\fs20 \cf7 \CocoaLigature0 NSNotificationCenter\cf0  * nCenter = [\cf7 NSNotificationCenter\cf0  \cf5 defaultCenter\cf0 ];\
        [nCenter \cf5 addObserverForName\cf0 :\cf8 @"dataUpdated"\cf0  \cf5 object\cf0 :\cf3 nil\cf0  \cf5 queue\cf0 :\cf3 nil\cf0  \cf5 usingBlock\cf0 :^(\cf7 NSNotification\cf0  *note) \{\
            [\cf3 self\cf0 .\cf7 tableView\cf0  \cf5 reloadData\cf0 ];\
\pard\intbl\itap1\pardeftab720

\f3\fs22 \cf0 \CocoaLigature1 \
call this is SoundCloudRequeset\
\
\
cannot do anything with NSUserInterface Objects must be manipulated on the main thread.  \
we called aSynchronous Thread meaning that its waiting for different operations to fire off before something happens.  We have to send it back to the main thread using the grand central dispatch
\f2\fs20 \CocoaLigature0           \cell \lastrow\row
\pard\tx481\pardeftab481\pardirnatural
\cf0             \cf5 dispatch_async\cf0 (\cf9 dispatch_get_main_queue\cf0 (), ^\{\
                \
                 [\cf3 self\cf0 .\cf7 tableView\cf0  \cf5 reloadData\cf0 ];\
            \});\
post must be run on the table view itself.  \
posting like posting something up\
\

\f1\b0 \

\f2\b *** READ UP ON NS NOTIFICATION CENTER ***
\f1\b0 \
\
\
After Lunch\
creating a new class ALA Dictionary\
This a supercalss which Track, , and Artist can inherit from\
\
\

\f2\b ALAPLAYLIST.m\
\

\f1\b0 - (\cf7 NSMutableArray\cf0  *)tracks\
\{\
    \cf3 if\cf0 (\cf4 _tracks\cf0  == \cf3 nil\cf0 ) \
    \cf4 _tracks\cf0  = [\cf6 @[]\cf0  \cf5 mutableCopy\cf0 ];\
    \cf3 return\cf0  \cf4 _tracks\cf0 ;\
\}\
\
getter method - checking to see if the tracks array is nil (_tracks is a local instance)  \
then alloc and init with mutable copy\
then returning tracks\
\
\
\
\
\
\
\
\
\
\
\
\

\f2\b \
}